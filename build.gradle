plugins {
  id 'java'
  id 'application'
  id 'jacoco'
  id 'com.gradleup.shadow' version '9.0.0-beta12'
}


def getVersionName() {
  try {
    def output = providers.exec {
      executable 'git'
      args = ['describe', '--tags']
    }.standardOutput.asText.get().trim()
    // strip of leading "v"
    return output.substring(1)
  } catch (ignore) {
    println(ignore)
    logger.info('Error running git describe (' + ignore + '), defaulting to 0.0.0')
    return '0.0.0'
  }
}


project.group = 'org.pharmgkb'
project.version = getVersionName()

ext {
  moduleName = 'org.pharmgkb.pharmcat'
  description = 'The Pharmacogenomic Clinical Annotation Tool'
  url = 'https://github.com/PharmGKB/PharmCAT.git'
  scm = 'scm:git@github.com:PharmGKB/PharmCAT.git'
  orgName = 'ClinPGx'
  orgUrl = 'https://www.clinpgx.org'
  mainClassName = "org.pharmgkb.pharmcat.PharmCAT"
  archiveBaseName = "pharmcat"
}

def dataDir = System.env.PHARMCAT_DATA_DIR == null ? 'build' : System.env.PHARMCAT_DATA_DIR


repositories {
  mavenCentral()
}

dependencies {
  implementation(
      [group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.16'],
      [group: 'commons-cli', name: 'commons-cli', version: '1.9.0'],
      [group: 'commons-codec', name: 'commons-codec', version: '1.18.0'],
      [group: 'commons-io', name: 'commons-io', version: '2.18.0'],
      [group: 'com.github.jknack', name: 'handlebars', version: '4.4.0'],
      [group: 'com.google.code.gson', name: 'gson', version: '2.13.0'],
      [group: 'com.google.guava', name: 'guava', version: '33.4.8-jre'],
      [group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'],
      // used by poi; adding because transitive dependency has a security alert
      [group: 'org.apache.commons', name: 'commons-compress', version: '1.27.1'],
      [group: 'org.apache.commons', name: 'commons-lang3', version: '3.17.0'],
      [group: 'org.apache.commons', name: 'commons-text', version: '1.13.0'],
      [group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'],
      [group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.24.3'],
      [group: 'org.apache.poi', name: 'poi-ooxml', version: '5.4.0'],
      [group: 'org.checkerframework', name: 'checker-qual', version: '3.48.0'],
      [group: 'org.pharmgkb', name: 'pgkb-common', version: '0.7.3'],
      [group: 'org.pharmgkb', name: 'vcf-parser', version: '0.3.1'],
      [group: 'org.slf4j', name: 'slf4j-api', version: '2.0.16'],
  )

  testImplementation(
      [group: 'org.hamcrest', name: 'hamcrest', version: '2.2'],
      [group: 'org.jsoup', name: 'jsoup', version: '1.19.1'],
      [group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.11.1'],
      [group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.11.2'],
      [group: 'uk.org.webcompere', name: 'system-stubs-core', version: '2.1.8'],
      [group: 'uk.org.webcompere', name: 'system-stubs-jupiter', version: '2.1.8']
  )
}


tasks.register('cleanTestOutput', Delete) {
  delete "${rootDir}/out/reports"
  delete "${rootDir}/out/pharmcat*"
}

clean.dependsOn(tasks.cleanTestOutput)

test.dependsOn(tasks.cleanTestOutput)

java {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}

application {
  mainClass = project.ext.mainClassName
}

tasks.withType(Test).configureEach {
  minHeapSize = "512m"
  maxHeapSize = "2048m"
  useJUnitPlatform()
  testLogging {
    // set options for log level LIFECYCLE
    events 'failed', 'standard_error'
    exceptionFormat = 'full'
    showStackTraces = true
  }

  // always generate reports after tests are run
  finalizedBy jacocoTestReport
}

tasks.register('testOnJava21', Test) {
  javaLauncher = javaToolchains.launcherFor {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

jacocoTestReport {
  // tests must be run before generating the report
  dependsOn test
  reports {
    xml.required = true // codecov depends on xml format report
    html.required = true
  }
}


jar {
  inputs.property('moduleName', project.ext.moduleName)
  manifest {
    attributes 'Automatic-Module-Name': project.ext.moduleName
    attributes 'Implementation-Title': project.name
    attributes 'Implementation-Version': project.version
    attributes 'Main-Class': project.ext.mainClassName
  }
  archiveBaseName = project.ext.archiveBaseName
}

shadowJar {
  manifest {
    attributes 'Implementation-Title': project.name
    attributes 'Implementation-Version': project.version
  }
  archiveBaseName = project.ext.archiveBaseName
}

tasks.withType(Javadoc).configureEach {
  // disable the crazy super-strict doclint tool in Java 8
  options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.register('javadocJar', Jar) {
  dependsOn javadoc
  archiveClassifier.set('javadoc')
  from 'build/docs/javadoc'
}

tasks.register('sourcesJar', Jar) {
  archiveClassifier.set('sources')
  from sourceSets.main.allSource
}

tasks.register('updateData', JavaExec) {
  dependsOn 'classes'
  mainClass = 'org.pharmgkb.pharmcat.util.DataManager'
  classpath = sourceSets.main.runtimeClasspath
  args = [
      '-a', file('src/main/resources/org/pharmgkb/pharmcat/definition/alleles'),
      '-p', file('src/main/resources/org/pharmgkb/pharmcat/phenotype'),
      '-m', file('src/main/resources/org/pharmgkb/pharmcat/reporter'),
      '-g', file('src/main/resources/org/pharmgkb/pharmcat/reporter'),
      '-doc', file('docs'),
  ]
}


tasks.register('updateExample') {
  dependsOn 'classes'
  doLast {
    // update data
    javaexec {
      mainClass = 'org.pharmgkb.pharmcat.util.SampleDataUpdater'
      classpath = sourceSets.main.runtimeClasspath
      args = [
          "${projectDir}"
      ]
    }

    // update first example
    javaexec {
      mainClass = 'org.pharmgkb.pharmcat.PharmCAT'
      classpath = sourceSets.main.runtimeClasspath
      args = [
          '-vcf', file('docs/examples/pharmcat.example.vcf'),
          '-po', file('docs/examples/pharmcat.example.outsideCall.tsv'),
          '-reporterCallsOnlyTsv', '-reporterJson', '-reporterHtml', '-matcherHtml'
      ]
    }

    // update second example
    javaexec {
      mainClass = 'org.pharmgkb.pharmcat.PharmCAT'
      classpath = sourceSets.main.runtimeClasspath
      args = [
          '-vcf', file('docs/examples/pharmcat.example2.vcf'),
          '-reporterCallsOnlyTsv', '-reporterJson', '-reporterHtml', '-matcherHtml'
      ]
    }
  }
}

tasks.register('testAutogeneratedVcfs', JavaExec) {
  dependsOn 'classes'
  mainClass = 'org.pharmgkb.pharmcat.haplotype.AutogeneratedVcfTester'
  classpath = sourceSets.main.runtimeClasspath
  jvmArgs = ['-Xmx8G']
  args = [
      '-vcf', new File(dataDir as File, 'testVcf'),
      '-o', new File(dataDir as File, 'autogeneratedTestResults')
  ]
}

tasks.register('testAutogeneratedVcfsMissing', JavaExec) {
  dependsOn 'classes'
  mainClass = 'org.pharmgkb.pharmcat.haplotype.AutogeneratedVcfTester'
  classpath = sourceSets.main.runtimeClasspath
  jvmArgs = ['-Xmx8G']
  args = [
      '-vcf', new File(dataDir as File, 'testVcf'),
      '-o', new File(dataDir as File, 'autogeneratedTestResults')
  ]
}

tasks.register('testAutogeneratedVcfsExactMatchOnly', JavaExec) {
  dependsOn 'classes'
  mainClass = 'org.pharmgkb.pharmcat.haplotype.AutogeneratedVcfTester'
  classpath = sourceSets.main.runtimeClasspath
  jvmArgs = ['-Xmx8G']
  args = [
      '-vcf', new File(dataDir as File, 'testVcf'),
      '-o', new File(dataDir as File, 'autogeneratedTestResults'),
      '-e'
  ]
}

tasks.register('testAutogeneratedVcfsExactMatchOnlyMissing', JavaExec) {
  dependsOn 'classes'
  mainClass = 'org.pharmgkb.pharmcat.haplotype.AutogeneratedVcfTester'
  classpath = sourceSets.main.runtimeClasspath
  jvmArgs = ['-Xmx8G']
  args = [
      '-vcf', new File(dataDir as File, 'testVcf'),
      '-o', new File(dataDir as File, 'autogeneratedTestResults'),
      '-e'
  ]
}

tasks.register('testAutogeneratedVcfsFuzzyMatch', JavaExec) {
  dependsOn 'classes'
  mainClass = 'org.pharmgkb.pharmcat.haplotype.AutogeneratedVcfTester'
  classpath = sourceSets.main.runtimeClasspath
  jvmArgs = ['-Xmx8G']
  args = [
      '-vcf', new File(dataDir as File, 'testVcf'),
      '-o', new File(dataDir as File, 'autogeneratedTestResults'),
      '-f'
  ]
}

tasks.register('testAutogeneratedVcfsFuzzyMatchMissing', JavaExec) {
  dependsOn 'classes'
  mainClass = 'org.pharmgkb.pharmcat.haplotype.AutogeneratedVcfTester'
  classpath = sourceSets.main.runtimeClasspath
  jvmArgs = ['-Xmx8G']
  args = [
      '-vcf', new File(dataDir as File, 'testVcf'),
      '-o', new File(dataDir as File, 'autogeneratedTestResults'),
      '-f'
  ]
}

artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}
